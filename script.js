// =======================
// Vari치veis Globais
// =======================
let arCondicionadoLigado = false;
let modoAtual = "---";
let bancoDeDadosSimulado = [];
let idRegistro = 1;

// Vari치veis para simular conex칫es reais (Mantenha como 'false' para testar os alertas)
// Altere para TRUE quando o Arduino ou o BD real estiverem conectados
const IS_ARDUINO_CONNECTED = false; // Simula a conex칚o com o hardware de controle (Arduino)
const IS_DATABASE_CONNECTED = false; // Simula a conex칚o com um BD persistente

const tempAmbienteElemento = document.getElementById("temp-ambiente");
const statusDispositivo = document.getElementById("status-dispositivo");
const modoAtualElemento = document.getElementById("modo-atual");
const tempDesejadaElemento = document.getElementById("temp-desejada-valor");
const logArea = document.getElementById("log-area");

// =======================
// Utilit치rios
// =======================
function adicionarLog(mensagem, tipo = "info") {
    const agora = new Date().toLocaleTimeString();
    const log = document.createElement("p");
    log.className = `log-item ${tipo}`;
    log.textContent = `[${agora}] ${mensagem}`;
    logArea.prepend(log);
}

function checkPermission() {
    // Nesta simula칞칚o, 'Administrativa' 칠 a 칰nica que permite a a칞칚o.
    const permissao = document.getElementById("user-permission").textContent;
    if (permissao !== "Administrativa") {
        adicionarLog("A칞칚o bloqueada: Permiss칚o insuficiente.", "warning");
        return false;
    }
    return true;
}

// NOVIDADE: Verifica se o dispositivo de controle (Arduino) est치 pronto
function checkArduinoConnection() {
    if (!IS_ARDUINO_CONNECTED) {
        alert("丘멆잺 ATEN칂츾O: Dispositivo de controle (Arduino) n칚o conectado. O comando n칚o ser치 enviado ao hardware.");
        return false;
    }
    return true;
}

// =======================
// Fun칞칫es de Controle
// =======================
function ligarAr() {
    if (!checkPermission()) return;
    if (!checkArduinoConnection()) { // Verifica a conex칚o com o Arduino
        adicionarLog("AC n칚o LIGADO: Falha na comunica칞칚o com o Arduino.", "error");
        return; 
    }
    if (arCondicionadoLigado) {
        adicionarLog("O AC j치 est치 LIGADO.", "info");
        return;
    }

    arCondicionadoLigado = true;
    statusDispositivo.textContent = "LIGADO";
    statusDispositivo.classList.remove("status-desligado");
    statusDispositivo.classList.add("status-ligado");
    adicionarLog("Ar condicionado LIGADO (Comando Enviado).", "success");
    registrarNoBanco();
}

function desligarAr() {
    if (!checkPermission()) return;
    if (!checkArduinoConnection()) { // Verifica a conex칚o com o Arduino
        adicionarLog("AC n칚o DESLIGADO: Falha na comunica칞칚o com o Arduino.", "error");
        return; 
    }
    if (!arCondicionadoLigado) {
        adicionarLog("O AC j치 est치 DESLIGADO.", "info");
        return;
    }

    arCondicionadoLigado = false;
    statusDispositivo.textContent = "DESLIGADO";
    statusDispositivo.classList.remove("status-ligado");
    statusDispositivo.classList.add("status-desligado");
    adicionarLog("Ar condicionado DESLIGADO (Comando Enviado).", "error");
    registrarNoBanco();
}

function setAutomatico() {
    if (!checkPermission()) return;
    if (!checkArduinoConnection()) { // Verifica a conex칚o com o Arduino
        adicionarLog("Modo Autom치tico n칚o ativado: Falha no sensor/controle.", "error");
        return;
    }
    adicionarLog("Modo AUTOM츼TICO ativado. O sistema gerenciar치 o AC com base nos sensores.", "info");
    // Aqui seria a l칩gica para iniciar o loop de controle autom치tico
    registrarNoBanco();
}

function setTemperatura() {
    const novaTemp = document.getElementById("temp-desejada").value;
    tempDesejadaElemento.textContent = `${novaTemp}춿C`;
    
    // Alerta se o comando de temperatura n칚o pode ser enviado
    if (!checkArduinoConnection()) {
        adicionarLog(`Temperatura visualizada, mas n칚o enviada ao AC.`, "warning");
        return;
    }
    
    adicionarLog(`Temperatura desejada definida para ${novaTemp}춿C (Comando Enviado).`, "info");
    registrarNoBanco();
}

function setModo() {
    const novoModo = document.getElementById("modo-operacao").value;
    modoAtual = novoModo;
    modoAtualElemento.textContent = novoModo;
    
    // Alerta se o comando de modo n칚o pode ser enviado
    if (!checkArduinoConnection()) {
        adicionarLog(`Modo visualizado, mas n칚o enviado ao AC.`, "warning");
        return;
    }

    adicionarLog(`Modo de opera칞칚o alterado para ${novoModo} (Comando Enviado).`, "info");
    registrarNoBanco();
}

// ============================
// Simula칞칚o de Banco de Dados
// ============================

function registrarNoBanco() {
    // NOVIDADE: ALERTA CLARO SOBRE O BANCO DE DADOS
    if (!IS_DATABASE_CONNECTED) {
        alert("游뚿 ALERTA BD: O hist칩rico de a칞칫es est치 sendo salvo APENAS no 'Banco de Dados Simulado' (na mem칩ria do navegador). Os dados N츾O est칚o sendo persistidos em um banco de dados real. Para persistir, defina 'IS_DATABASE_CONNECTED' como true.");
    }
    
    const agora = new Date();
    const dataHora = agora.toLocaleString("pt-BR");
    const status = arCondicionadoLigado ? "Ligado" : "Desligado";
    const tempAtual = tempAmbienteElemento.textContent;

    const novoRegistro = {
        id: idRegistro++,
        dataHora,
        status,
        temperatura: tempAtual,
        modo: modoAtual,
    };

    bancoDeDadosSimulado.unshift(novoRegistro);
    // Limita o hist칩rico a 10 registros
    if (bancoDeDadosSimulado.length > 10) {
        bancoDeDadosSimulado.pop();
    }

    atualizarTabela();
}

function atualizarTabela() {
    const tbody = document.querySelector("#tabela-banco tbody");
    tbody.innerHTML = "";

    bancoDeDadosSimulado.forEach((registro) => {
        const linha = document.createElement("tr");
        linha.innerHTML = `
            <td>${registro.id}</td>
            <td>${registro.dataHora}</td>
            <td>${registro.status}</td>
            <td>${registro.temperatura}</td>
            <td>${registro.modo}</td>
        `;
        tbody.appendChild(linha);
    });
}

// =======================
// Atualizar Data e Hora
// =======================
function atualizarRelogio() {
    const agora = new Date();
    document.getElementById("data-hora").textContent = agora.toLocaleString("pt-BR");
}
setInterval(atualizarRelogio, 1000);
atualizarRelogio();

// Define o modo e a temperatura inicial na carga da p치gina
document.addEventListener('DOMContentLoaded', () => {
    // Garante que a temperatura e o modo inicial sejam exibidos ao carregar
    setTemperatura(); 
    setModo(); 
});
